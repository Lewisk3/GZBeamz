
class BeamzMath Abstract
{
	static vector3 getAxes(double angle, double pitch, double roll)
	{
		return offsetToGlobal(angle, pitch, roll, 1.0,0,0);
	}
	
	static vector3 offsetToGlobal(double angle, double pitch, double roll, double forward, double leftright, double updown)
	{
		let mat = BeamzMatrix.fromEulerAngles(angle, pitch, roll);
		mat = mat.multiplyVector3((forward, -leftright, updown));
		return mat.asVector3(false);
	}
}

// Matrix library from Gutamatics (https://gitlab.com/Gutawer/gzdoom-gutamatics/-/blob/master/Gutamatics/Matrix.zsc)
enum BeamzVectorType {
	BeamzVector_Position,
	BeamzVector_Direction
}

class BeamzMatrix {
	private Array<double> values;
	private int columns;
	private int rows;

	/// Initialises a new Matrix.
	BeamzMatrix init(int columns, int rows) {
		if (columns <= 0 || rows <= 0) {
			throwAbortException("Error: <%p>.init(%d, %d) - Matrix needs to be at least 1 * 1", self, columns, rows);
		}

		self.rows = rows;
		self.columns = columns;
		values.resize(columns * rows);
		for (int i = 0; i < values.size(); i++) {
			values[i] = 0;
		}

		return self;
	}

	/// Initialises a new Matrix in a static context.
	static BeamzMatrix create(int columns, int rows) {
		return new("BeamzMatrix").init(columns, rows);
	}

	/// Returns an identity matrix.
	static BeamzMatrix identity(int dimension) {
		BeamzMatrix ret = BeamzMatrix.create(dimension, dimension);
		for (int i = 0; i < dimension; i++) {
			ret.set(i, i, 1);
		}
		return ret;
	}

	/// Returns a rotation matrix from euler angles.
	static BeamzMatrix fromEulerAngles(double yaw, double pitch, double roll) {
		BeamzMatrix rYaw = BeamzMatrix.identity(4);
		double sYaw = sin(yaw);
		double cYaw = cos(yaw);
		rYaw.set(0, 0,  cYaw);
		rYaw.set(0, 1, -sYaw);
		rYaw.set(1, 0,  sYaw);
		rYaw.set(1, 1,  cYaw);

		BeamzMatrix rPitch = BeamzMatrix.identity(4);
		double sPitch = sin(pitch);
		double cPitch = cos(pitch);
		rPitch.set(0, 0,  cPitch);
		rPitch.set(2, 0, -sPitch);
		rPitch.set(0, 2,  sPitch);
		rPitch.set(2, 2,  cPitch);

		BeamzMatrix rRoll = BeamzMatrix.identity(4);
		double sRoll = sin(roll);
		double cRoll = cos(roll);
		rRoll.set(1, 1,  cRoll);
		rRoll.set(1, 2, -sRoll);
		rRoll.set(2, 1,  sRoll);
		rRoll.set(2, 2,  cRoll);

		// concatenate ypr to get the final matrix
		BeamzMatrix ret = rYaw.multiplyMatrix(rPitch);
		ret = ret.multiplyMatrix(rRoll);
		return ret;
	}

	/// Returns a rotation matrix from an axis and an angle.
	static BeamzMatrix fromAxisAngle(Vector3 axis, double angle) {
		BeamzMatrix ret = BeamzMatrix.identity(4);
		double c = cos(angle);
		double s = sin(angle);
		double x = axis.x;
		double y = axis.y;
		double z = axis.z;

		ret.set(0, 0, (x * x * (1.0 - c) + c));
		ret.set(0, 1, (x * y * (1.0 - c) - z * s));
		ret.set(0, 2, (x * z * (1.0 - c) + y * s));
		ret.set(1, 0, (y * x * (1.0 - c) + z * s));
		ret.set(1, 1, (y * y * (1.0 - c) + c));
		ret.set(1, 2, (y * z * (1.0 - c) - x * s));
		ret.set(2, 0, (x * z * (1.0 - c) - y * s));
		ret.set(2, 1, (y * z * (1.0 - c) + x * s));
		ret.set(2, 2, (z * z * (1.0 - c) + c));

		return ret;
	}
	
	static BeamzMatrix createTRSEuler(Vector3 translate, double yaw, double pitch, double roll, Vector3 scale) {
		BeamzMatrix translateMat = BeamzMatrix.identity(4);
		translateMat.set(0, 3, translate.x);
		translateMat.set(1, 3, translate.y);
		translateMat.set(2, 3, translate.z);
		
		BeamzMatrix rotateMat = BeamzMatrix.fromEulerAngles(yaw, pitch, roll);
		
		BeamzMatrix scaleMat = BeamzMatrix.identity(4);
		scaleMat.set(0, 0, scale.x);
		scaleMat.set(1, 1, scale.y);
		scaleMat.set(2, 2, scale.z);
		
		BeamzMatrix ret = translateMat.multiplyMatrix(rotateMat);
		ret = ret.multiplyMatrix(scaleMat);
		return ret;
	}
	
	static BeamzMatrix createTRSAxisAngle(Vector3 translate, Vector3 axis, double angle, Vector3 scale) {
		BeamzMatrix translateMat = BeamzMatrix.identity(4);
		translateMat.set(0, 3, translate.x);
		translateMat.set(1, 3, translate.y);
		translateMat.set(2, 3, translate.z);
		
		BeamzMatrix rotateMat = BeamzMatrix.fromAxisAngle(axis, angle);
		
		BeamzMatrix scaleMat = BeamzMatrix.identity(4);
		scaleMat.set(0, 0, scale.x);
		scaleMat.set(1, 1, scale.y);
		scaleMat.set(2, 2, scale.z);
		
		BeamzMatrix ret = translateMat.multiplyMatrix(rotateMat);
		ret = ret.multiplyMatrix(scaleMat);
		return ret;
	}

	/// Gets the value at row, col.
	double get(int row, int col) const {
		return values[columns * row + col];
	}

	/// Sets the value at row, col.
	void set(int row, int col, double val) {
		values[columns * row + col] = val;
	}

	/// Adds two matrices and returns the result.
	BeamzMatrix addMatrix(BeamzMatrix other) const {
		if (rows != other.rows || columns != other.columns) {
			throwAbortException("Error: <%p>.addMatrix(<%p>) - Matrices need to be equal size", self, other);
		}
		BeamzMatrix ret = BeamzMatrix.create(columns, rows);
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < columns; col++) {
				ret.set(row, col, get(row, col) + other.get(row, col));
			}
		}
		return ret;
	}

	/// Multiplies the matrix by a scalar and returns the result.
	BeamzMatrix multiplyScalar(double scalar) const {
		BeamzMatrix ret = BeamzMatrix.create(rows, columns);
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < columns; col++) {
				ret.set(row, col, get(row, col) * scalar);
			}
		}
		return ret;
	}

	/// Multiplies two matrices and returns the result.
	BeamzMatrix multiplyMatrix(BeamzMatrix other) const {
		if (columns != other.rows) {
			throwAbortException("Error: <%p>.multiplyMatrix(<%p>) - Matrix A columns needs to equal Matrix B rows", self, other);
		}
		BeamzMatrix ret = BeamzMatrix.create(other.columns, rows);
		for (int row = 0; row < ret.rows; row++) {
			for (int col = 0; col < ret.columns; col++) {
				double val = 0;
				for (int i = 0; i < columns; i++) {
					val += get(row, i) * other.get(i, col);
				}
				ret.set(row, col, val);
			}
		}
		return ret;
	}

	/// Multiplies this Matrix by a 2D vector.
	BeamzMatrix multiplyVector2(Vector2 vec, BeamzVectorType type = BeamzVector_Position) const {
		BeamzMatrix vec2Matrix = BeamzMatrix.create(1, 3);
		vec2Matrix.set(0, 0, vec.x);
		vec2Matrix.set(1, 0, vec.y);
		if (type == BeamzVector_Position)       vec2Matrix.set(2, 0, 1);
		else if (type == BeamzVector_Direction) vec2Matrix.set(2, 0, 0);
		else throwAbortException("Error: Invalid vector type for multiplyVector2 (%d)", type);
		return multiplyMatrix(vec2Matrix);
	}

	/// Multiplies this Matrix by a 3D vector.
	BeamzMatrix multiplyVector3(Vector3 vec, BeamzVectorType type = BeamzVector_Position) const {
		BeamzMatrix vec3Matrix = BeamzMatrix.create(1, 4);
		vec3Matrix.set(0, 0, vec.x);
		vec3Matrix.set(1, 0, vec.y);
		vec3Matrix.set(2, 0, vec.z);
		if (type == BeamzVector_Position)       vec3Matrix.set(3, 0, 1);
		else if (type == BeamzVector_Direction) vec3Matrix.set(3, 0, 0);
		else throwAbortException("Error: Invalid vector type for multiplyVector3 (%d)", type);
		return multiplyMatrix(vec3Matrix);
	}

	/// Returns the Matrix in Vector2 form, optionally dividing by z.
	Vector2 asVector2(bool divideZ = true) const {
		if (columns != 1 || rows != 3) {
			throwAbortException("Error: <%p>.asVector2() - Matrix needs to be 1 * 3", self);
		}
		if (divideZ) return (get(0, 0), get(1, 0)) / get(2, 0);
		else         return (get(0, 0), get(1, 0));
	}

	/// Returns the Matrix in Vector3 form, optionally dividing by w.
	Vector3 asVector3(bool divideW = true) const {
		if (columns != 1 || rows != 4) {
			throwAbortException("Error: <%p>.asVector3() - Matrix needs to be 1 * 4", self);
		}
		if (divideW) return (get(0, 0), get(1, 0), get(2, 0)) / get(3, 0);
		else         return (get(0, 0), get(1, 0), get(2, 0));
	}

	/// Returns the number of columns.
	int getColumns() const {
		return columns;
	}

	/// Returns the number of rows.
	int getRows() const {
		return rows;
	}
}
